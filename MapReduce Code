package customer;
import org.apache.hadoop.conf.Configuration; 
import org.apache.hadoop.fs.Path; 
import org.apache.hadoop.io.IntWritable; 
import org.apache.hadoop.io.Text; 
import org.apache.hadoop.mapreduce.Job; 
import org.apache.hadoop.mapreduce.Mapper; 
import org.apache.hadoop.mapreduce.Reducer; 
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat; 
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat; 
import java.io.IOException; 
public class ComplaintsAnalysis 
{ 
public static class ComplaintsMapper extends Mapper<Object, Text, Text, IntWritable > { 
private final static IntWritable one = new IntWritable(1); 
private Text ComplaintType = new Text(); 
public void map(Object key, Text value, Context context) throws IOException, InterruptedException { 
//Split CSV line 
String[] parts = value.toString() .split(","); 
//Check if line is not header and has enough data 
if (parts. length > 3 && parts [0]. equals("Complaint ID")) { 
String type = parts[17]; // Assuming the 18th column is Complaint Type 
ComplaintType.set(type); 
context.write(ComplaintType, one); 
} 
} 
} 

public static class ComplaintsReducer extends Reducer<Text, IntWritable, Text, IntWritable > { 
private IntWritable result = new IntWritable (); 
public void reduce(Text key, Iterable<IntWritable > values, Context context) throws IOException, InterruptedException { 
int summary = 0; 
for (IntWritable val : values) { 
summary += val. get(); 
} 
result.set(summary); 
context.write(key, result); 
} 
} 
public static void main(String[] args) throws Exception 
{ 
               Configuration conf = new Configuration(); 
                Job job = Job.getInstance(conf, "Customer Complaints Analysis");             
                job.setJarByClass(ComplaintsAnalysis.class); 
                job.setMapperClass(ComplaintsMapper.class); 
                job.setCombinerClass(ComplaintsReducer.class); 
                job.setReducerClass(ComplaintsReducer.class); 
                job.setOutputKeyClass(Text.class);  
                job.setOutputValueClass(IntWritable.class);  
                FileInputFormat.addInputPath(job, new Path(args[0])); 
                FileOutputFormat.setOutputPath(job, new Path(args[1])); 
                System.exit(job.waitForCompletion(true) ? 0 : 1 ); 
                               } 
} 




